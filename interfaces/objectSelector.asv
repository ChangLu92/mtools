function varargout = objectSelector(varargin)
% OBJECTSELECTOR M-file for objectSelector.fig
%      OBJECTSELECTOR, by itself, creates a new OBJECTSELECTOR or raises the existing
%      singleton*.
%
%      H = OBJECTSELECTOR returns the handle to a new OBJECTSELECTOR or the
%      handle to
%      the existing singleton*.
%
%      OBJECTSELECTOR('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in OBJECTSELECTOR.M with the given input
%      arguments.
%
%      OBJECTSELECTOR('Property','Value',...) creates a new OBJECTSELECTOR or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before objectSelector_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to objectSelector_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help objectSelector

% Last Modified by GUIDE v2.5 01-Sep-2009 10:27:16

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @objectSelector_OpeningFcn, ...
                   'gui_OutputFcn',  @objectSelector_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before objectSelector is made visible.
function objectSelector_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to objectSelector (see VARARGIN)

%Set the zoom buttons
zoomInIcon = imread('zoomInButton.png', 'png');
zoomOutIcon = imread('zoomOutButton.png', 'png');
set(handles.zoomInButton,'CDATA',zoomInIcon);
set(handles.zoomOutButton,'CDATA',zoomOutIcon);


% Choose default command line output for objectSelector
handles.output = hObject;
handles.pixels = varargin{1};
handles.channelLabel = varargin{2};
handles.roiShapes = varargin{3};
handles.planesThisROI = varargin{4};
handles.credentials = varargin{5};
handles.channel1 = varargin{6};
handles.channel2 = varargin{7};
handles.firstRunSelect1 = 1;
handles.firstRunSelect2 = 1;
handles.currentPointSeg1 = 0;
handles.currentPointSeg2 = 0;
handles.chosenObject1 = 0;
handles.chosenObject2 = 0;
handles.zoomLevel = 0;
%firstChannelLabels = ['Select', handles.channelLabel];
set(handles.channelSelect1, 'String', handles.channelLabel);
set(handles.channelSelect2, 'String', handles.channelLabel);
numChannels = length(handles.channelLabel);
patchBWLn{numChannels} = [];
setappdata(handles.objectSelector, 'patchBWLn', patchBWLn);
numZ = length(handles.planesThisROI{1}(1,1,:));
handles.numZ = numZ;
if numZ == 1
    set(handles.zSlider1, 'Max', 1);
    set(handles.zSlider2, 'Max', 1);
    set(handles.zSlider1, 'Enable', 'off');
    set(handles.zSlider2, 'Enable', 'off');
else
    set(handles.zSlider1, 'Max', numZ-1);
    set(handles.zSlider2, 'Max', numZ-1);
end
set(handles.zSlider1, 'SliderStep', [1/numZ 1]);
set(handles.zSlider2, 'SliderStep', [1/numZ 1]);
for thisChannel = 1:numChannels
    handles.patches{thisChannel} = [];
    handles.segmentedPatches{thisChannel} =[];
    handles.projectedPlane(:,:,thisChannel) = mean(handles.planesThisROI{thisChannel},3);
end
handles.renderedProjection = createRenderedImage(handles.projectedPlane, handles.pixels);

%Display the image
%Calculate the ROI box on the projected image, use 'Line' function to avoid
%scaling issues (uses the axes coords).
axes(handles.projectionAxes)
handles.projectionHandle = imshow(handles.renderedProjection);

ROIX = handles.roiShapes.shape1.getX.getValue;
ROIY = handles.roiShapes.shape1.getY.getValue;
ROIwidth = handles.roiShapes.shape1.getWidth.getValue;
ROIheight = handles.roiShapes.shape1.getHeight.getValue;
handles.ROICentroid = [floor(ROIX + (ROIwidth/2)) floor(ROIY + (ROIheight/2))];

topLineY = [];
bottomLineY = [];
leftLineX = [];
rightLineX = [];
lineX = ROIX:ROIX+ROIwidth;
lineY = ROIY:ROIY+ROIheight;
for i = 1:ROIwidth+1
    topLineY = [topLineY ROIY];
    bottomLineY = [bottomLineY ROIY+ROIheight];
end
for i = 1:ROIheight+1
    leftLineX = [leftLineX ROIX];
    rightLineX = [rightLineX ROIX+ROIwidth];
end
line(lineX, topLineY, 'color', 'white');
line(lineX, bottomLineY, 'color', 'white');
line(leftLineX, lineY, 'color', 'white');
line(rightLineX, lineY, 'color', 'white');

% Update handles structure
guidata(hObject, handles);

%Set the default channel for each segmentation window and update display
set(handles.channelSelect1, 'Value', handles.channel1);
channelSelect1_Callback(handles.channelSelect1, eventdata, handles);
set(handles.channelSelect2, 'Value', handles.channel2);
channelSelect2_Callback(handles.channelSelect2, eventdata, handles);


uiwait(handles.objectSelector);

% UIWAIT makes objectSelector wait for user response (see UIRESUME)
% uiwait(handles.objectSelector);


% --- Outputs from this function are returned to the command line.
function varargout = objectSelector_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure

varargout{1} = handles.output;
varargout{2} = get(handles.channelSelect1, 'Value');
varargout{3} = get(handles.channelSelect2, 'Value');
java.lang.System.gc;
close(handles.objectSelector);


function segAxes1_CreateFcn(hObject, eventdata, handles)

axis off;

function segAxes2_CreateFcn(hObject, eventdata, handles)

axis off;


% --- Executes on slider movement.
function zSlider1_Callback(hObject, eventdata, handles)
% hObject    handle to zSlider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

%if handles.firstRunSelect1 ~= 1
    changeSeg1(hObject, eventdata, handles);
%end


% --- Executes during object creation, after setting all properties.
function zSlider1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to zSlider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on slider movement.
function zSlider2_Callback(hObject, eventdata, handles)
% hObject    handle to zSlider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

%if handles.firstRunSelect2 ~=1
    changeSeg2(hObject, eventdata, handles);
%end


% --- Executes during object creation, after setting all properties.
function zSlider2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to zSlider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on selection change in channelSelect1.
function channelSelect1_Callback(hObject, eventdata, handles)
% hObject    handle to channelSelect1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns channelSelect1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from channelSelect1

% chosenChannel = get(hObject, 'String');
% if strcmpi(chosenChannel(get(hObject, 'Value')), 'Select')
%     return
% else
%     if handles.firstRunSelect1 == 1
%         channelSelect1Idx = get(hObject, 'Value');
%         set(handles.channelSelect1, 'String', handles.channelLabel);
%         set(hObject, 'Value', channelSelect1Idx-1);
%         handles.firstRunSelect1 = 0;
%     end
    setappdata(handles.objectSelector, 'chosenObject1',0);
    changeSeg1(hObject, eventdata, handles);
%end
guidata(hObject, handles);




% --- Executes during object creation, after setting all properties.
function channelSelect1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to channelSelect1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in channelSelect2.
function channelSelect2_Callback(hObject, eventdata, handles)
% hObject    handle to channelSelect2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns channelSelect2 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from channelSelect2

% chosenChannel = get(hObject, 'String');
% if strcmpi(chosenChannel(get(hObject, 'Value')), 'Select')
%     return
% else
%     if handles.firstRunSelect2 == 1
%         channelSelect2Idx = get(hObject, 'Value');
%         set(handles.channelSelect2, 'String', handles.channelLabel);
%         set(hObject, 'Value', channelSelect2Idx-1);
%         handles.firstRunSelect2 = 0;
%     end
    setappdata(handles.objectSelector, 'chosenObject2',0);
    changeSeg2(hObject, eventdata, handles);
%end
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function channelSelect2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to channelSelect2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in acceptButton.
function acceptButton_Callback(hObject, eventdata, handles)
% hObject    handle to acceptButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

chosenObject1 = getappdata(handles.objectSelector, 'chosenObject1');
chosenObject2 = getappdata(handles.objectSelector, 'chosenObject2');

if chosenObject1 > 0 && chosenObject2 > 0
    measureDistances(hObject, eventdata, handles); 
end
    


function clickSeg1(hObject, eventdata, handles)

selectedChannel = get(handles.channelSelect1, 'Value');
handles.currentPointSeg1 = get(handles.segAxes1, 'CurrentPoint');
patchBWLn = getappdata(handles.objectSelector, 'patchBWLn');
X = round(handles.currentPointSeg1(1));
Y = round(handles.currentPointSeg1(4));
Z = round(get(handles.zSlider1, 'Value'))+1;
[pY pX pZ] = size(patchBWLn{selectedChannel});
chosenObject1 = getappdata(handles.objectSelector, 'chosenObject1');
if X<=pX && Y<=pY
    chosenObject1 = patchBWLn{selectedChannel}(Y,X,Z);
    if chosenObject1 > 0
%         handles.chosenObject1 = chosenObject1;
        handles.displayPatch1(:,:,1) = patchBWLn{selectedChannel}(:,:,Z);
        handles.displayPatch1(:,:,2) = patchBWLn{selectedChannel}(:,:,Z);
        handles.displayPatch1(:,:,3) = patchBWLn{selectedChannel}(:,:,Z);
        handles.displayPatch1(handles.displayPatch1(:,:,1)==chosenObject1) = 1;
        handles.displayPatch1(handles.displayPatch1(:,:,2)==chosenObject1) = 0;
        handles.displayPatch1(handles.displayPatch1(:,:,3)==chosenObject1) = 0;
        handles.imageHandle1 = imshow(handles.displayPatch1);
        set(handles.imageHandle1, 'ButtonDownFcn', {@clickSeg1, handles});
    end
end
setappdata(handles.objectSelector, 'chosenObject1', chosenObject1);
guidata(handles.segAxes1, handles);


function clickSeg2(hObject, eventdata, handles)

selectedChannel = get(handles.channelSelect2, 'Value');
handles.currentPointSeg2 = get(handles.segAxes2, 'CurrentPoint');
patchBWLn = getappdata(handles.objectSelector, 'patchBWLn');
X = round(handles.currentPointSeg2(1));
Y = round(handles.currentPointSeg2(4));
Z = round(get(handles.zSlider2, 'Value'))+1;
[pY pX pZ] = size(patchBWLn{selectedChannel});
chosenObject2 = getappdata(handles.objectSelector, 'chosenObject2');
if X<=pX && Y<=pY 
    chosenObject2 = patchBWLn{selectedChannel}(Y,X,Z);
    if chosenObject2 > 0
%         handles.chosenObject2 = chosenObject2;
        handles.displayPatch2(:,:,1) = patchBWLn{selectedChannel}(:,:,Z);
        handles.displayPatch2(:,:,2) = patchBWLn{selectedChannel}(:,:,Z);
        handles.displayPatch2(:,:,3) = patchBWLn{selectedChannel}(:,:,Z);
        handles.displayPatch2(handles.displayPatch2(:,:,1)==chosenObject2) = 1;
        handles.displayPatch2(handles.displayPatch2(:,:,2)==chosenObject2) = 0;
        handles.displayPatch2(handles.displayPatch2(:,:,3)==chosenObject2) = 0;
        handles.imageHandle2 = imshow(handles.displayPatch2);
        set(handles.imageHandle2, 'ButtonDownFcn', {@clickSeg2, handles});
    end
end
setappdata(handles.objectSelector, 'chosenObject2', chosenObject2);
guidata(handles.segAxes2, handles)



function changeSeg1(hObject, eventdata, handles)

roiShapes = handles.roiShapes;
patches = handles.patches;
patchBWLn = getappdata(handles.objectSelector, 'patchBWLn');
selectedChannel = get(handles.channelSelect1, 'Value');
numZ = handles.numZ;
planesThisROI = handles.planesThisROI;

if isempty(patches{selectedChannel})
    pixels = handles.pixels;
    thisPatch = 1;
    X = handles.roiShapes.shape1.getX.getValue + 1;
    Y = handles.roiShapes.shape1.getY.getValue + 1;
    width = handles.roiShapes.shape1.getWidth.getValue;
    height = handles.roiShapes.shape1.getHeight.getValue;
    maxX = pixels.getSizeX.getValue;
    maxY = pixels.getSizeY.getValue;
    thisPatch = 1;
    for thisZ = 1:numZ
        %for thisC = channelsToFetch(1:end)
        patch(:,:,thisZ) = zeros(height,width);

        %Check for the ROI going outwith the image. If it does
        %the patch will be contructed pixel by pixel. Otherwise
        %it can be done with a quick matrix operation.
        ROIEndX = X+width;
        ROIEndY = Y+height;
        if ROIEndX > maxX || ROIEndY > maxY || X < 0 || Y < 0
            cropPatch = 1;
        else
            cropPatch = 0;
        end

        if cropPatch == 1
            if X < 1
                X = 1;
            end
            if Y < 1
                Y = 1;
            end

            for col = 1:width
                posX = col+X-1;
                if posX > maxX  %If the ROI was drawn to extend off the image, set the crop to the edge of the image only.
                    posX = maxX;
                end
                for row = 1:height
                    posY = row+Y-1;
                    if posY > maxY
                        posY = maxY;
                    end
                    patch(row, col, thisZ) = planesThisROI{selectedChannel}(posY, posX, thisZ);
                end
            end
        else
            posX = X+width-1;
            posY = Y+height-1;
            patch(:,:,thisZ) = planesThisROI{selectedChannel}(Y:posY,X:posX,thisZ);
        end

        thisPatch = thisPatch + 1;
    end
    segmentedPatches = seg3D(patch, 0, 1, 1);
    patchBWLn{selectedChannel} = bwlabeln(segmentedPatches);
    patches = patch;
    handles.segmentedPatches{selectedChannel} = segmentedPatches;
    setappdata(handles.objectSelector, 'patchBWLn', patchBWLn);
    handles.patches{selectedChannel} = patches;
end

displayZ = round(get(handles.zSlider1, 'Value'))+1;
set(handles.ZLabel1, 'String', ['Z: ' num2str(displayZ)]);
axes(handles.segAxes1);
chosenObject1 = getappdata(handles.objectSelector, 'chosenObject1');
if chosenObject1 == 0
    handles.displayPatch1(:,:,1) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch1(:,:,2) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch1(:,:,3) = patchBWLn{selectedChannel}(:,:,displayZ);
else
    handles.displayPatch1(:,:,1) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch1(:,:,2) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch1(:,:,3) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch1(handles.displayPatch1(:,:,1)==chosenObject1) = 1;
    handles.displayPatch1(handles.displayPatch1(:,:,2)==chosenObject1) = 0;
    handles.displayPatch1(handles.displayPatch1(:,:,3)==chosenObject1) = 0;
    %handles.imageHandle1 = imshow(handles.displayPatch1, [0 max(handles.patchBWLn{selectedChannel}(:))]);
end

handles.imageHandle1 = imshow(handles.displayPatch1, [0 max(patchBWLn{selectedChannel}(:))]);
set(handles.imageHandle1, 'ButtonDownFcn', {@clickSeg1, handles});

guidata(handles.objectSelector, handles);
clear planesThisROI;


function changeSeg2(hObject, eventdata, handles)

roiShapes = handles.roiShapes;
patches = handles.patches;
patchBWLn = getappdata(handles.objectSelector, 'patchBWLn');
selectedChannel = get(handles.channelSelect2, 'Value');
numZ = handles.numZ;
planesThisROI = handles.planesThisROI;

if isempty(patches{selectedChannel})
    pixels = handles.pixels;
    thisPatch = 1;
    X = handles.roiShapes.shape1.getX.getValue + 1;
    Y = handles.roiShapes.shape1.getY.getValue + 1;
    width = handles.roiShapes.shape1.getWidth.getValue;
    height = handles.roiShapes.shape1.getHeight.getValue;
    maxX = pixels.getSizeX.getValue;
    maxY = pixels.getSizeY.getValue;
    thisPatch = 1;
    for thisZ = 1:numZ
        %for thisC = channelsToFetch(1:end)
        patch(:,:,thisZ) = zeros(height,width);
        %Check for the ROI going outwith the image. If it does
        %the patch will be contructed pixel by pixel. Otherwise
        %it can be done with a quick matrix operation.
        ROIEndX = X+width;
        ROIEndY = Y+height;
        if ROIEndX > maxX || ROIEndY > maxY || X < 0 || Y < 0
            cropPatch = 1;
        else
            cropPatch = 0;
        end

        if cropPatch == 1
            if X < 1
                X = 1;
            end
            if Y < 1
                Y = 1;
            end

            for col = 1:width
                posX = col+X-1;
                if posX > maxX  %If the ROI was drawn to extend off the image, set the crop to the edge of the image only.
                    posX = maxX;
                end
                for row = 1:height
                    posY = row+Y-1;
                    if posY > maxY
                        posY = maxY;
                    end
                    patch(row, col, thisZ) = planesThisROI{selectedChannel}(posY, posX, thisZ);
                end
            end
        else
            posX = X+width-1;
            posY = Y+height-1;
            patch(:,:,thisZ) = planesThisROI{selectedChannel}(Y:posY,X:posX,thisZ);
        end
        thisPatch = thisPatch + 1;
    end
    segmentedPatches = seg3D(patch, 0, 1, 1);
    patchBWLn{selectedChannel} = bwlabeln(segmentedPatches);
    patches = patch;
    handles.segmentedPatches{selectedChannel} = segmentedPatches;
    setappdata(handles.objectSelector, 'patchBWLn', patchBWLn);
    handles.patches{selectedChannel} = patches;
end

displayZ = round(get(handles.zSlider2, 'Value'))+1;
set(handles.ZLabel2, 'String', ['Z: ' num2str(displayZ)]);
axes(handles.segAxes2);
chosenObject2 = getappdata(handles.objectSelector, 'chosenObject2');
if chosenObject2 == 0
    handles.displayPatch2(:,:,1) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch2(:,:,2) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch2(:,:,3) = patchBWLn{selectedChannel}(:,:,displayZ);
else
    handles.displayPatch2(:,:,1) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch2(:,:,2) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch2(:,:,3) = patchBWLn{selectedChannel}(:,:,displayZ);
    handles.displayPatch2(handles.displayPatch2(:,:,1)==chosenObject2) = 1;
    handles.displayPatch2(handles.displayPatch2(:,:,2)==chosenObject2) = 0;
    handles.displayPatch2(handles.displayPatch2(:,:,3)==chosenObject2) = 0;
end

handles.imageHandle2 = imshow(handles.displayPatch2, [0 max(patchBWLn{selectedChannel}(:))]);
set(handles.imageHandle2, 'ButtonDownFcn', {@clickSeg2, handles});

guidata(handles.objectSelector, handles);
clear planesThisROI;


function measureDistances(hObject, eventdata, handles)

roiShapes = handles.roiShapes;
selectedChannel1 = get(handles.channelSelect1, 'Value');
selectedChannel2 = get(handles.channelSelect2, 'Value');
selectedChannelLabel1 = handles.channelLabel(selectedChannel1);
selectedChannelLabel2 = handles.channelLabel(selectedChannel2);
chosenObject1 = getappdata(handles.objectSelector, 'chosenObject1');
chosenObject2 = getappdata(handles.objectSelector, 'chosenObject2');
patchBWLn = getappdata(handles.objectSelector, 'patchBWLn');
objectPatch1 = patchBWLn{selectedChannel1};
objectPatch2 = patchBWLn{selectedChannel2};
objectPatch1(objectPatch1~=(chosenObject1)) = 0;
objectPatch2(objectPatch2~=(chosenObject2)) = 0;
objectPatch1(find(objectPatch1)) = 1;
objectPatch2(find(objectPatch2)) = 1;
handles.objectPatch1 = objectPatch1;
handles.objectPatch2 = objectPatch2;
handles.objectCentroid1 = regionprops(objectPatch1, 'Centroid');
handles.objectCentroid2 = regionprops(objectPatch2, 'Centroid');
physX = handles.pixels.getPhysicalSizeX.getValue;
physY = handles.pixels.getPhysicalSizeY.getValue;
physZ = handles.pixels.getPhysicalSizeZ.getValue;


numZ = handles.numZ;
x1 = handles.objectCentroid1.Centroid(1);
y1 = handles.objectCentroid1.Centroid(2);
x2 = handles.objectCentroid2.Centroid(1);
y2 = handles.objectCentroid2.Centroid(2);
if numZ == 1
    z1 = 2;
    z2 = 1;
else
    z1 = handles.objectCentroid1.Centroid(3);
    z2 = handles.objectCentroid2.Centroid(3);
end

if physX == 1 && physY == 1
    physZ = 1;
end
handles.distance = sqrt( ((x1-x2)*physX)^2 + ((y1-y2)*physY)^2 + ((z1-z2)*physZ)^2);

global selectorOutput;

selectedChannel1 = get(handles.channelSelect1, 'Value');
selectedChannel2 = get(handles.channelSelect2, 'Value');
selectorOutput{1} = selectedChannelLabel1;
selectorOutput{2} = selectedChannelLabel2;
selectorOutput{3} = chosenObject1;
selectorOutput{4} = chosenObject2;
selectorOutput{5} = handles.objectPatch1;
selectorOutput{6} = handles.objectPatch2;
selectorOutput{7} = handles.objectCentroid1;
selectorOutput{8} = handles.objectCentroid2;
selectorOutput{9} = handles.distance;
if physX == 1 && physY == 1
    selectorOutput{10} = 'Pixels';
else
    selectorOutput{10} = 'um';
end
handles.output = selectorOutput;

guidata(handles.objectSelector, handles);
uiresume(handles.objectSelector);
clear objectPatch1;
clear objectPatch2;


% --- Executes on button press in zoomInButton.
function zoomInButton_Callback(hObject, eventdata, handles)
% hObject    handle to zoomInButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

handles.zoomLevel = handles.zoomLevel + 1;
if handles.zoomLevel == 3
    return;
end
zoomLevel = handles.zoomLevel;
ROIX = handles.roiShapes.shape1.getX.getValue;
ROIY = handles.roiShapes.shape1.getY.getValue;
ROIwidth = handles.roiShapes.shape1.getWidth.getValue;
ROIheight = handles.roiShapes.shape1.getHeight.getValue;
renderedProjection = handles.renderedProjection;
[projHeight projWidth projRGB] = size(renderedProjection);
maxZoomX = floor(handles.ROICentroid(1) + (projWidth/(4*zoomLevel)));
maxZoomY = floor(handles.ROICentroid(2) + (projHeight/(4*zoomLevel)));
minZoomX = floor(handles.ROICentroid(1) - (projWidth/(4*zoomLevel)));
minZoomY = floor(handles.ROICentroid(2) - (projHeight/(4*zoomLevel)));
ROIXDifference = ROIX-minZoomX;
ROIYDifference = ROIY-minZoomY;

if maxZoomX > projWidth
    maxZoomX = projWidth;
    minZoomX = floor(maxZoomX-(projWidth/2));
end
if maxZoomY > projHeight
    maxZoomY = projHeight;
    minZoomY = floor(maxZoomY-(projHeight/2));
end
if minZoomX <= 0
    minZoomX = 1;
    maxZoomX = floor(minZoomX+(projWidth/2));
end
if minZoomY <= 0
    minZoomY = 0;
    maxZoomY = floor(minZoomY+(projHeight/2));
end

zoomProjection = renderedProjection(minZoomY:maxZoomY, minZoomX:maxZoomX,:);
axes(handles.projectionAxes);
handles.projectionHandle = imshow(zoomProjection);

%newROICentroid = [handles.ROICentroid(1)-minZ];
% ROIX = handles.roishapeIdx.X(1)*2;
% ROIY = handles.roishapeIdx.Y(1)*2;
% ROIwidth = handles.roishapeIdx.Width(1);
% ROIheight = handles.roishapeIdx.Height(1);
% topLineY = [];
% bottomLineY = [];
% leftLineX = [];
% rightLineX = [];
% lineX = ROIX:ROIX+ROIwidth;
% lineY = ROIY:ROIY+ROIheight;
% for i = 1:ROIwidth+1
%     topLineY = [topLineY ROIY];
%     bottomLineY = [bottomLineY ROIY+ROIheight];
% end
% for i = 1:ROIheight+1
%     leftLineX = [leftLineX ROIX];
%     rightLineX = [rightLineX ROIX+ROIwidth];
% end
% line(lineX, topLineY, 'color', 'white');
% line(lineX, bottomLineY, 'color', 'white');
% line(leftLineX, lineY, 'color', 'white');
% line(rightLineX, lineY, 'color', 'white');
guidata(hObject, handles);
clear renderedProjection;
clear zoomProjection;





% --- Executes on button press in zoomOutButton.
function zoomOutButton_Callback(hObject, eventdata, handles)
% hObject    handle to zoomOutButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Display the image
axes(handles.projectionAxes)
handles.projectionHandle = imshow(handles.renderedProjection);
handles.zoomLevel = 0;

ROIX = handles.roiShapes.shape1.getX.getValue * 2;
ROIY = handles.roiShapes.shape1.getY.getValue * 2;
ROIwidth = handles.roiShapes.shape1.getWidth.getValue;
ROIheight = handles.roiShapes.shape1.getHeight.getValue;
topLineY = [];
bottomLineY = [];
leftLineX = [];
rightLineX = [];
lineX = ROIX:ROIX+ROIwidth;
lineY = ROIY:ROIY+ROIheight;
for i = 1:ROIwidth+1
    topLineY = [topLineY ROIY];
    bottomLineY = [bottomLineY ROIY+ROIheight];
end
for i = 1:ROIheight+1
    leftLineX = [leftLineX ROIX];
    rightLineX = [rightLineX ROIX+ROIwidth];
end
line(lineX, topLineY, 'color', 'white');
line(lineX, bottomLineY, 'color', 'white');
line(leftLineX, lineY, 'color', 'white');
line(rightLineX, lineY, 'color', 'white');

guidata(hObject, handles);



function updateChosenObjects(hObject, eventdata, handles, chosenObject1, chosenObject2)

if ~isempty(chosenObject1)
    disp('Obj1')
    drawnow
    handles.chosenObject1 = chosenObject1
end
if ~isempty(chosenObject2)
    disp('Obj2');
    drawnow
    handles.chosenObject2 = chosenObject2
end
% 
% if isfield(handles, 'displayPatch1')
%     [displayPatch1SelectionBlueY, displayPatch1SelectionBlueX] = find(handles.displayPatch1(:,:,1))
%     [displayPatch1SelectionGreenY, displayPatch1SelectionGreenX] = find(handles.displayPatch1(:,:,2)==0)
%     displayPatch1SelectionIntersection = intersect(displayPatch1SelectionBlueX, displayPatch1SelectionGreenX)
%     if ~isempty(displayPatch1SelectionIntersection)
%         patch1Z = get(handles.zSlider1, 'Value');
%         patch1Channel = get(handles.channelSelect1, 'Value')
%         handles.chosenObject1 = handles.patchBWLn{patch1Channel}(displayPatch1SelectionBlueY(1), displayPatch1SelectionBlueX(1), patch1Z+1)
%     end
% end
% 
% if isfield(handles, 'displayPatch2')
%     [displayPatch2SelectionBlueY, displayPatch2SelectionBlueX] = find(handles.displayPatch2(:,:,1))
%     [displayPatch2SelectionGreenY, displayPatch2SelectionGreenX] = find(handles.displayPatch2(:,:,2)==0)
%     displayPatch2SelectionIntersection = intersect(displayPatch2SelectionBlueX, displayPatch2SelectionGreenX)
%     if ~isempty(displayPatch2SelectionIntersection)
%         patch2Z = get(handles.zSlider2, 'Value');
%         patch2Channel = get(handles.channelSelect2, 'Value')
%         handles.chosenObject2 = handles.patchBWLn{patch2Channel}(displayPatch2SelectionBlueY(1), displayPatch2SelectionBlueX(1), patch2Z+1)
%     end
% end

guidata(handles.objectSelector, handles);
drawnow;

